// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7GsKSKBAN3BeuhzrgUjPJ
// Component: z7eiptq3UC

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { ProductBox } from "@plasmicpkgs/commerce"; // plasmic-import: 1gYJf_XBZUAD/codeComponent
import { ProductSlider } from "@plasmicpkgs/commerce"; // plasmic-import: 5k_ZYl4EkcYi/codeComponent
import { ProductMedia } from "@plasmicpkgs/commerce"; // plasmic-import: qpULM0wwWW/codeComponent
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: S1F4q0wN6b/codeComponent
import { ProductPriceComponent } from "@plasmicpkgs/commerce"; // plasmic-import: _PaJxGc8gf/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: q7GsKSKBAN3BeuhzrgUjPJ/projectcss
import sty from "./PlasmicProduct.module.css"; // plasmic-import: z7eiptq3UC/css

export type PlasmicProduct__VariantMembers = {};
export type PlasmicProduct__VariantsArgs = {};
type VariantPropType = keyof PlasmicProduct__VariantsArgs;
export const PlasmicProduct__VariantProps = new Array<VariantPropType>();

export type PlasmicProduct__ArgsType = {};
type ArgPropType = keyof PlasmicProduct__ArgsType;
export const PlasmicProduct__ArgProps = new Array<ArgPropType>();

export type PlasmicProduct__OverridesType = {
  root?: p.Flex<"div">;
  myStore?: p.Flex<"h1">;
  h1?: p.Flex<"h1">;
  columns?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  productSlider?: p.Flex<typeof ProductSlider>;
  productMedia?: p.Flex<typeof ProductMedia>;
  productTextField?: p.Flex<typeof ProductTextField>;
  productPrice?: p.Flex<typeof ProductPriceComponent>;
};

export interface DefaultProductProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProduct__RenderFunc(props: {
  variants: PlasmicProduct__VariantsArgs;
  args: PlasmicProduct__ArgsType;
  overrides: PlasmicProduct__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <h1
            data-plasmic-name={"myStore"}
            data-plasmic-override={overrides.myStore}
            className={classNames(projectcss.all, projectcss.h1, sty.myStore)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"MY STORE"}
            </h1>
          </h1>
          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div className={classNames(projectcss.all, sty.column__eVrok)}>
              <div className={classNames(projectcss.all, sty.freeBox__ncty7)}>
                <p.PlasmicLink
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link
                  )}
                  component={Link}
                  href={`/list`}
                  platform={"nextjs"}
                >
                  {"HOME"}
                </p.PlasmicLink>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.column__p7Uje)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qdcXu
                )}
              >
                {"CART"}
              </div>
            </div>
          </div>
          <ProductBox
            className={classNames("__wab_instance", sty.productBox__fbSd)}
            id={(() => {
              try {
                return $ctx.params.slug;
              } catch (e) {
                if (e instanceof TypeError) {
                  return "gid://shopify/Product/8241238835512";
                }
                throw e;
              }
            })()}
            noLayout={true}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <React.Fragment>
                  <ProductSlider
                    data-plasmic-name={"productSlider"}
                    data-plasmic-override={overrides.productSlider}
                    className={classNames("__wab_instance", sty.productSlider)}
                    slideContainer={
                      <ph.DataCtxReader>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__qGwH1
                            )}
                          >
                            <ProductMedia
                              className={classNames(
                                "__wab_instance",
                                sty.productMedia__ebEu8
                              )}
                            />
                          </div>
                        )}
                      </ph.DataCtxReader>
                    }
                    slideSelected={0 as const}
                    thumbsContainer={
                      <ph.DataCtxReader>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mG2Jf
                            )}
                          >
                            <ProductMedia
                              className={classNames(
                                "__wab_instance",
                                sty.productMedia__h8Arm
                              )}
                            />
                          </div>
                        )}
                      </ph.DataCtxReader>
                    }
                    thumbsVisible={4 as const}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox___6C9Jl)}
                  >
                    <ProductBox
                      className={classNames(
                        "__wab_instance",
                        sty.productBox__eamfK
                      )}
                      id={(() => {
                        try {
                          return $ctx.params.slug;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <ph.DataCtxReader>
                        {$ctx => (
                          <React.Fragment>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__sUcVh
                              )}
                            >
                              {true ? (
                                <ProductMedia
                                  data-plasmic-name={"productMedia"}
                                  data-plasmic-override={overrides.productMedia}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.productMedia
                                  )}
                                />
                              ) : null}
                              <ProductTextField
                                data-plasmic-name={"productTextField"}
                                data-plasmic-override={
                                  overrides.productTextField
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.productTextField
                                )}
                                field={"name" as const}
                              />
                            </div>
                            <ProductPriceComponent
                              data-plasmic-name={"productPrice"}
                              data-plasmic-override={overrides.productPrice}
                              className={classNames(
                                "__wab_instance",
                                sty.productPrice
                              )}
                            />
                          </React.Fragment>
                        )}
                      </ph.DataCtxReader>
                    </ProductBox>
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nA2Y
                        )}
                      >
                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jcGMo
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ecJxT
                              )}
                            >
                              {(() => {
                                try {
                                  return $ctx.currentProduct.description;
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return "Enter some text";
                                  }
                                  throw e;
                                }
                              })()}
                            </div>
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                  </div>
                </React.Fragment>
              )}
            </ph.DataCtxReader>
          </ProductBox>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "myStore",
    "h1",
    "columns",
    "link",
    "productSlider",
    "productMedia",
    "productTextField",
    "productPrice"
  ],
  myStore: ["myStore", "h1"],
  h1: ["h1"],
  columns: ["columns", "link"],
  link: ["link"],
  productSlider: ["productSlider"],
  productMedia: ["productMedia"],
  productTextField: ["productTextField"],
  productPrice: ["productPrice"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  myStore: "h1";
  h1: "h1";
  columns: "div";
  link: "a";
  productSlider: typeof ProductSlider;
  productMedia: typeof ProductMedia;
  productTextField: typeof ProductTextField;
  productPrice: typeof ProductPriceComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProduct__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProduct__VariantsArgs;
    args?: PlasmicProduct__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProduct__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProduct__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProduct__ArgProps,
          internalVariantPropNames: PlasmicProduct__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProduct__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProduct";
  } else {
    func.displayName = `PlasmicProduct.${nodeName}`;
  }
  return func;
}

export const PlasmicProduct = Object.assign(
  // Top-level PlasmicProduct renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    myStore: makeNodeComponent("myStore"),
    h1: makeNodeComponent("h1"),
    columns: makeNodeComponent("columns"),
    link: makeNodeComponent("link"),
    productSlider: makeNodeComponent("productSlider"),
    productMedia: makeNodeComponent("productMedia"),
    productTextField: makeNodeComponent("productTextField"),
    productPrice: makeNodeComponent("productPrice"),

    // Metadata about props expected for PlasmicProduct
    internalVariantProps: PlasmicProduct__VariantProps,
    internalArgProps: PlasmicProduct__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProduct;
/* prettier-ignore-end */
